# -*- coding: utf-8 -*-
import codecs
import random

from dash import dcc, html, dash_table, callback_context as ctx
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
import dash_grocery
import dash_bootstrap_components as dbc
import dash_dangerously_set_inner_html

from app import app
from ReversoDictionary import ReversoDictionary

# default styles for flag buttons
clicked_style = {'border': 'solid 2px black', 'background-color': 'lightgreen'}
unclicked_style = {'border': 'None', 'background-color': '#f9f9f9'}

# list of countries as accepted by dictionary AND in order displayed through flags
ordered_flags_from = ['francais', 'anglais', 'italien', 'espagnol', 'portugais']
ordered_flags_to = ['francais', 'anglais', 'italien', 'espagnol', 'portugais']

# create dictionary and initiate it
dico = ReversoDictionary()


layout = [
    dbc.Container([
        dbc.Row([
            dbc.Col([
                html.Img(src=app.get_asset_url("language_icon.png"), className='icon'),
                html.Button([
                    html.Img(
                        src=app.get_asset_url("fra_flag.png"),
                        className='flag',
                    )
                ],
                    id='francais_flag_game_from',
                    style={'border': 'solid 2px black', 'background-color': 'lightgreen'},
                    className='equalButton'),
                html.Button([
                    html.Img(
                        src=app.get_asset_url("eng_flag.png"),
                        className='flag',
                    ),
                ],
                    id='anglais_flag_game_from',
                    style={'border': 'None', 'background-color': '#f9f9f9'},
                    className='equalButton'),
                html.Button([
                    html.Img(
                        src=app.get_asset_url("ita_flag.png"),
                        className='flag',
                    ),
                ],
                    id='italien_flag_game_from',
                    style={'border': 'None', 'background-color': '#f9f9f9'},
                    className='equalButton'),
                html.Button([
                    html.Img(
                        src=app.get_asset_url("spa_flag.png"),
                        className='flag',
                    ),
                ],
                    id='espagnol_flag_game_from',
                    style={'border': 'None', 'background-color': '#f9f9f9'},
                    className='equalButton'),
                html.Button([
                    html.Img(
                        src=app.get_asset_url("por_flag.png"),
                        className='flag',
                    ),
                ],
                    id='portugais_flag_game_from',
                    style={'border': 'None', 'background-color': '#f9f9f9'},
                    className='equalButton'),
            ], xs=12, md=4, align='center'),
            dbc.Col([
                html.Div('Pick your game mode',
                         style={"font-size": "1.4rem", "display": "flex",
                                "align-items": "center", "justify-content": "center"}),
            ], xs=12, md=4,  align='center'),
            dbc.Col([
                html.Img(src=app.get_asset_url("destination_icon.png"), className='icon'),
                html.Button([
                    html.Img(
                        src=app.get_asset_url("fra_flag.png"),
                        className='flag',
                    )
                    ],
                    id='francais_flag_game_to',
                    style={'border': 'solid 2px black', 'background-color': 'lightgreen'},
                    className='equalButton'),
                html.Button([
                    html.Img(
                        src=app.get_asset_url("eng_flag.png"),
                        className='flag',
                    ),
                    ],
                    id='anglais_flag_game_to',
                    style={'border': 'None', 'background-color': '#f9f9f9'},
                    className='equalButton'),
                html.Button([
                    html.Img(
                        src=app.get_asset_url("ita_flag.png"),
                        className='flag',
                    ),
                    ],
                    id='italien_flag_game_to',
                    style={'border': 'None', 'background-color': '#f9f9f9'},
                    className='equalButton'),
                html.Button([
                    html.Img(
                        src=app.get_asset_url("spa_flag.png"),
                        className='flag',
                    ),
                    ],
                    id='espagnol_flag_game_to',
                    style={'border': 'None', 'background-color': '#f9f9f9'},
                    className='equalButton'),
                html.Button([
                    html.Img(
                        src=app.get_asset_url("por_flag.png"),
                        className='flag',
                    ),
                ],
                    id='portugais_flag_game_to',
                    style={'border': 'None', 'background-color': '#f9f9f9'},
                    className='equalButton'),
            ], xs=12, md=4, align='center'),
        ], justify='center', align='center', style={"margin-top": "20px", "margin-bottom": "20px"}),
        dbc.Row([
            dbc.Col([
                dcc.Markdown(
                    [],
                    id="game_question",
                    style={"font-size": "1.8rem", "display": "flex",
                           "align-items": "center", "justify-content": "center"},
                ),
                html.Div([
                    dash_grocery.Stars(count=5, size=60, value=0, edit=True, id='game_rating'),
                ], style={"display": "flex", "align-items": "center", "justify-content": "center"}),
                html.Div(
                    [
                        dbc.Button(
                            html.Img(src=app.get_asset_url("Take_a_look_icon.jpg"),
                                     className='sneak_peek_button'),
                            id="collapse-button",
                            className="d-grid gap-2 col-6 mx-auto",
                            outline=True,
                            color="light",
                            size='lg',
                            n_clicks=0,
                            style={"display": "flex", "align-items": "center", "justify-content": "center"},
                        ),
                        dbc.Collapse([
                            html.Div(
                                [],
                                id='html_output_game_box0',
                                style={"font-size": "1.2rem", "margin-bottom": "30px"},
                            ),
                            html.Div(
                                [],
                                id='html_output_game_box1',
                                style={"font-size": "1.2rem", "margin-bottom": "30px"},
                            ),
                            dbc.Row([
                                html.A(
                                    id="url_source_game",
                                    children="",
                                    href="",
                                    style={'color': 'blue', "font-size": "0.8rem", "text-decoration": "underline"}
                                ),
                            ], style={"margin-left": "10px", "margin-bottom": "30px"}),
                            html.Div([], id='table_output_game'),
                            ],
                            id="collapse",
                            is_open=False,
                        ),
                    ]
                ),
            ], xs=12, md={"size": 8, "offset": 4}, className="pretty_container"),
        ], align='start', justify='center'),
    ], fluid=True),
]


@app.callback(
    [Output("game_question", "children"),
     Output('html_output_game_box0', 'children'),
     Output('html_output_game_box1', 'children'),
     Output('url_source_game', 'children'),
     Output('url_source_game', 'href'),
     Output('table_output_game', 'children'),
     Output('game_rating', 'value'),
     Output("collapse", "is_open")],
    [Input(f'{f}_flag_game_from', 'style') for f in ordered_flags_from] +
    [Input(f'{f}_flag_game_to', 'style') for f in ordered_flags_to] +
    [Input('game_rating', 'value')] +
    [Input("collapse-button", "n_clicks")],
    [State("game_question", "children"),
     State('html_output_game_box0', 'children'),
     State('html_output_game_box1', 'children'),
     State('url_source_game', 'children'),
     State('url_source_game', 'href'),
     State('table_output_game', 'children'),
     State("collapse", "is_open")],
    prevent_initial_call=False,
)
def update_game_html_output(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, nb_stars, n,
                            q, html1, html2, url1, url2, table, is_open):
    """ Show definition or translation to user whenever a new word is needed (on click of stars rating)
     or whenever user change the type of action. It also controls the toggling of the collapse button """

    # work out what button is triggering the callback
    trigger = ctx.triggered[0]['prop_id']

    # if user clicks on toggle we just toggle back and forth
    # otherwise we reset it to closed with the new word
    if trigger == 'collapse-button.n_clicks':
        if n:
            toggle_is_open = not is_open
        else:
            toggle_is_open = is_open
        return [q, html1, html2, url1, url2, table, 0, toggle_is_open]

    # infer languages from style of buttons
    lang1_idx = [b['border'] != "None" for b in [s1, s2, s3, s4, s5]].index(True)
    lang2_idx = [b['border'] != "None" for b in [s6, s7, s8, s9, s10]].index(True)
    lang1 = ordered_flags_from[lang1_idx]
    lang2 = ordered_flags_to[lang2_idx]

    # if source and destination are the same change to definition
    if lang1 == lang2:
        lang2 = 'definition'

    # select word at random from word bank
    with codecs.open(f'./words/mots_{lang1}.txt', encoding='utf-8') as f:
        words = f.read().splitlines()
    input_word = random.choice(words)

    # put question together
    if lang2 == 'definition':
        if lang1 == "francais":
            question = f"Connais-tu la définition de _**{input_word}**_?"
        elif lang1 == "anglais":
            question = f"Do you know the definition for _**{input_word}**_?"
        elif lang1 == "italien":
            question = f"Conosci la definizione di _**{input_word}**_?"
        elif lang1 == "espagnol":
            question = f"¿Conoces la definición de _**{input_word}**_?"
        elif lang1 == "portugais":
            question = f"Conhece a definição de _**{input_word}**_?"
    else:
        if lang1 == "francais":
            question = f"Sais-tu traduire _**{input_word}**_ en {lang2}?"
        elif lang1 == "anglais":
            question = f"Do you know how to say _**{input_word}**_ in the target language?"
        elif lang1 == "italien":
            question = f"Sai come si dice _**{input_word}**_ nella lingua di arrivo?"
        elif lang1 == "espagnol":
            question = f"¿Sabes cómo se dice _**{input_word}**_ en la lengua de destino?"
        elif lang1 == "portugais":
            question = f"Sabe como dizer _**{input_word}**_ na língua de destino?"

    # get the content from dictionary
    word_url, box0_elms_norm, box1_elms_norm, content_df = dico.get_translation_or_definition(input_word, lang1, lang2)

    # table in dash format
    data_table = dash_table.DataTable(
        data=content_df.to_dict('records'),
        columns=[{"name": i, "id": i} for i in content_df.columns],
        style_cell={'textAlign': 'left'},
        style_header={'textAlign': 'center', 'fontWeight': 'bold'},
        style_data={
            'whiteSpace': 'normal',
            'height': 'auto',
        },
        style_data_conditional=[
            {
                'if': {'row_index': 'odd'},
                'backgroundColor': 'rgb(220, 220, 220)',
            }
        ],
    )

    return [question,
            dash_dangerously_set_inner_html.DangerouslySetInnerHTML(box0_elms_norm),
            dash_dangerously_set_inner_html.DangerouslySetInnerHTML(box1_elms_norm),
            word_url,
            word_url,
            [data_table],
            0,
            False]


@app.callback(
    [Output(f'{f}_flag_game_from', 'style') for f in ordered_flags_from] +
    [Output(f'{f}_flag_game_to', 'style') for f in ordered_flags_to],
    [Input(f'{f}_flag_game_from', 'n_clicks') for f in ordered_flags_from] +
    [Input(f'{f}_flag_game_to', 'n_clicks') for f in ordered_flags_to],
    [State(f'{f}_flag_game_from', 'style') for f in ordered_flags_from] +
    [State(f'{f}_flag_game_to', 'style') for f in ordered_flags_to],
    prevent_initial_call=True,
)
def update_game_buttons_style(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10):
    """ Change buttons' style based on flags user clicked on """

    # work out what button is triggering the callback
    trigger = ctx.triggered[0]['prop_id']
    trigger_type = trigger.split('.')[0].split('_')[-1]
    triggering_flag = trigger.split('.')[0].split('_')[0]

    # get current destination and source - infer from style of buttons
    lang1_idx = [b['border'] != "None" for b in [s1, s2, s3, s4, s5]].index(True)
    lang2_idx = [b['border'] != "None" for b in [s6, s7, s8, s9, s10]].index(True)
    from_flag = ordered_flags_from[lang1_idx]
    to_flag = ordered_flags_to[lang2_idx]

    if trigger_type == 'from':

        # style buttons accordingly
        return [clicked_style if f == triggering_flag else unclicked_style for f in ordered_flags_from] + \
               [clicked_style if f == to_flag else unclicked_style for f in ordered_flags_to]

    else:

        # style buttons accordingly
        return [clicked_style if f == from_flag else unclicked_style for f in ordered_flags_from] + \
               [clicked_style if f == triggering_flag else unclicked_style for f in ordered_flags_to]


# @app.callback(
#     Output("collapse", "is_open"),
#     [Input("collapse-button", "n_clicks")],
#     [State("collapse", "is_open")],
# )
# def toggle_collapse(n, is_open):
#     if n:
#         return not is_open
#     return is_open
